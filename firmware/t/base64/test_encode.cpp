#include <stdio.h>
#include "base64encoder.h"
#include "nanotap.h"

uint8_t decoded[ 4 ];
uint8_t decoded_index = 0;

void encoded(char letter) {
    decoded[ decoded_index ++ ] = letter;
    printf( "%c", letter );
}

void clear() {
    memset( decoded, 0, sizeof(decoded) );
    decoded_index = 0;
}

int main() {
    ok( 1, "ok" );

    {
        uint8_t binary[] = {
            0x8E
        };
        clear();
        base64_encode( binary, 1, &encoded );
        printf("\n");

        ok( decoded[ 0 ] == 'j' );
        ok( decoded[ 1 ] == 'g' );
        ok( decoded[ 2 ] == '=' );
        ok( decoded[ 3 ] == '=' );
        ok( base64_length(1) == 4 );
    }

    {
        uint8_t binary[] = {
            0x8E, 0x76
        };
        clear();
        base64_encode( binary, 2, &encoded );
        printf("\n");

        ok( decoded[ 0 ] == 'j' );
        ok( decoded[ 1 ] == 'n' );
        ok( decoded[ 2 ] == 'Y' );
        ok( decoded[ 3 ] == '=' );
        ok( base64_length(2) == 4 );
    }

    {
        uint8_t binary[] = {
            0x8E, 0x76, 0x01
        };
        clear();
        base64_encode( binary, 3, &encoded );
        printf("\n");

        ok( decoded[ 0 ] == 'j' );
        ok( decoded[ 1 ] == 'n' );
        ok( decoded[ 2 ] == 'Y' );
        ok( decoded[ 3 ] == 'B' );
        ok( base64_length(3) == 4 );
    }

    {
        uint8_t binary[] = {
            0x83,0x6E,0x1,0x48,0x66,0x3,0x40,0x1,0x4B,0x48,0x16,0x34,0x53,0x54,0x66,0x48,0x1,0x4C,0x48,0x22,0x55,0x5D,0x55,0x55,0x40,0x66,0x47,0x4B,0x47,0x1,0x66,0x48,0xC,0x55,0x50,0x4B,0x48,0x1,0x66,0x47,0x12,0x55,0x55,0x40,0x1,0x4B,0x47,0x14,0x55,0x55,0x50,0x1,0x66,0x48,0x18,0x5F,0x55,0xF5,0x1,0x4C,0x47,0x4,0x50,0x1,0x66,0x47,0x4,0x50,0x1,0x4C,0x49,0x6,0x74,0x66,0x47,0x4B,0x47,0x1,0x66,0x48,0x4,0x70,0x4B,0x47,0x1,0x66,0x48,0x6,0x54,0x4C,0x49,0x65,0x48,0x4B,0x47,0x1,0x66,0x48,0x12,0x5F,0x7F,0xC0,0x4C,0x47,0x1,0x66,0x4A,0x3,0x40,0x1,0x47,0x4B,0x3,0x40,0x1,0x66,0x48,0x20,0x57,0xF5,0x5D,0x5F,0x1,0x4B,0x47,0x4,0x50,0x1,0x66,0x47,0x3,0x60,0x1,0x4A,0x47,0xF,0xA,0x0,0x1,0x66,0x47,0x12,0x55,0x55,0xC0,0x1,0x4A,0x47,0xE,0x10,0x10,0x1,0x66,0x47,0x12,0x55,0x55,0xC0,0x1,0x4A,0x47,0xE,0x14,0x10,0x1,0x66,0x47,0xB,0x55,0x40,0x4A,0x66,0x1,0x47,0x66,0x5,0x40,0x1,0x4A,0x47,0xE,0x4,0x10,0x1,0x66,0x47,0x12,0x55,0x55,0xC0,0x1,0x4A,0x47,0xE,0x14,0x10,0x1,0x66,0x47,0xB,0x55,0x40,0x4A,0x66,0x1,0x47,0x66,0x3,0x40,0x1,0x4A,0x66,0x3,0x20,0x1,0x47,0x66,0x3,0x40,0x1,0x4A,0x47,0x4,0x10,0x1,0x66,0x48,0x8,0x7D,0x1,0x4B,0x47,0x4,0x50,0x1,0x66,0x49,0xC,0x5D,0x50,0x1,0x4C,0x47,0x6,0x54,0x1,0x66,0x47,0x8,0x55,0x4B,0x47,0x1,0x66,0x48,0x6,0x54,0x1,0x4C,0x47,0x18,0x55,0x55,0x55,0x1,0x66,0x47,0x10,0x55,0x55,0x1,0x4A,0x47,0x10,0x5,0x4,0x1,0x66,0x47,0x10,0x55,0x55,0x1,0x4A,0x47,0x8,0x5,0x1,0x66,0x48,0x1A,0x5F,0x55,0xF5,0x40,0x1,0x4C,0x47,0x10,0x55,0x55,0x1,0x66,0x48,0xE,0x55,0x54
        };
        clear();
        base64_encode( binary, 0x133, &encoded );
        printf("\n");
        printf("base64_length: %d -> %d\n", 0x133, base64_length(0x133));
    }

    done_testing();
}
